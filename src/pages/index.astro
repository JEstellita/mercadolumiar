---
import BaseLayout from '../layouts/BaseLayout.astro';
import ProgressBar from '../components/ProgressBar.astro';
import CtaButtons from '../components/CtaButtons.astro';

// Dados padrão durante build - serão atualizados no cliente
const progress = { 
  totalMonthly: 0, 
  goal: Number(import.meta.env.PUBLIC_GOAL_MONTHLY || 150), 
  supporters: 0, 
  stale: true 
};
---

<BaseLayout title="Compre local, construa futuro.">
  <section style="padding:2rem 0 1rem;">
    <h1 style="font-size:2rem; line-height:1.2; margin:0 0 .5rem;">Compre local, construa futuro.</h1>
    <p style="opacity:.9; max-width:60ch">Um site para comprar <strong>direto de quem produz</strong> em Lumiar e Biorregião.</p>
    <CtaButtons />
  </section>

  <ProgressBar total={progress.totalMonthly} goal={progress.goal} supporters={progress.supporters} stale={progress.stale} />

  <section style="margin-top:2rem;">
    <h2>Como funciona</h2>
    <ul style="margin:.5rem 0 0 1rem;">
      <li>Contribuição livre — qualquer valor mensal ajuda.</li>
      <li>Meta base: R$150/mês para cobrir plataforma e domínio.</li>
      <li>Acima disso: investimos em divulgação e publicação de novas bancas.</li>
    </ul>
  </section>

  <script>
    // Simular dados de progresso (pode ser conectado a uma API externa depois)
    document.addEventListener('DOMContentLoaded', () => {
      const progressSection = document.querySelector('[data-total]');
      if (progressSection) {
        // Dados simulados - substitua por chamada a API externa se necessário
        const mockData = {
          totalMonthly: 75.50,
          goal: 150,
          supporters: 3
        };
        
        progressSection.setAttribute('data-total', mockData.totalMonthly.toString());
        progressSection.setAttribute('data-goal', mockData.goal.toString());
        progressSection.setAttribute('data-supporters', mockData.supporters.toString());
        
        // Atualizar percentual
        const pct = Math.min(100, Math.round((mockData.totalMonthly / mockData.goal) * 100));
        const percentElement = progressSection.querySelector('span');
        if (percentElement) percentElement.textContent = pct + '%';
        
        // Atualizar barra visual
        const barElement = progressSection.querySelector('div > div') as HTMLElement;
        if (barElement) barElement.style.width = pct + '%';
        
        // Atualizar texto
        const textElement = progressSection.querySelector('p');
        if (textElement) {
          textElement.innerHTML = `<strong>R$ ${mockData.totalMonthly.toFixed(2)}</strong> de R$ ${mockData.goal}/mês • ${mockData.supporters} assinantes`;
        }
      }
    });
  </script>
</BaseLayout>